'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var registerEvent = function registerEvent(el, props) {
  if (el != null) {
    var d = el;
    var wheel = function wheel(evt) {
      var deltaY = evt.deltaY;
      scrollhandle(evt, deltaY, props, d);
    };
    document.addEventListener('wheel', wheel, {
      passive: false
    });
    var ts;
    var touchstart = function touchstart(e) {
      console.log(e);
      ts = e.changedTouches[0].clientY;
    };
    document.addEventListener('touchstart', touchstart);
    var touchmove = function touchmove(evt) {
      var te = evt.changedTouches[0].clientY;
      var deltaY;
      if (ts > te) {
        deltaY = 100;
      } else {
        deltaY = -100;
      }
      scrollhandle(evt, deltaY, props, d);
    };
    document.addEventListener('touchmove', touchmove, {
      passive: false
    });
    return function cleanUp() {
      document.removeEventListener('wheel', wheel);
      document.removeEventListener('touchstart', touchstart);
      document.removeEventListener('touchmove', touchmove);
      console.log("event listeners removed");
    };
  }
  return function () {
    console.log("no event listeners removed");
  };
};
function isInViewport(element) {
  var rect = element.getBoundingClientRect();
  var height = rect.bottom - rect.top;
  return rect.top >= 0 - height / 2 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) + height / 2 && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}
function element_center_postion(element) {
  var rect = element.getBoundingClientRect();
  var height = rect.bottom - rect.top;
  return rect.top + window.scrollY - height / 4;
}
var scrollhandle = function scrollhandle(evt, deltaY, props, d) {
  var inViewport = isInViewport(d);
  var isScrollable = d.scrollWidth > window.innerWidth;
  var scrollMax = d.scrollWidth;
  var sign = deltaY / Math.abs(deltaY);
  var scrollDistance = sign * (Math.max(Math.abs(deltaY), 120) || 120) * Math.abs(Math.min(props.scrollSpeed || 3, 10));
  if (props.isSlideShow) {
    scrollDistance = sign * window.innerWidth;
  }
  if (deltaY > 0) {
    //down
    if (isScrollable && inViewport && d.scrollLeft < scrollMax - window.innerWidth) {
      console.log(d.scrollWidth, window.innerWidth);
      evt.preventDefault();
      window.scroll({
        top: element_center_postion(d),
        behavior: "smooth"
      });
      d.scrollTo({
        top: 0,
        left: d.scrollLeft + scrollDistance,
        behavior: 'smooth'
      });
    }
  } else {
    //up
    if (props.reverse) {
      if (isScrollable && inViewport && d.scrollLeft > 0) {
        console.log(d.scrollWidth, window.innerWidth);
        evt.preventDefault();
        //d.scrollLeft += evt.deltaY;
        window.scroll({
          top: element_center_postion(d),
          behavior: "smooth"
        });
        d.scrollTo({
          top: 0,
          left: d.scrollLeft + scrollDistance,
          behavior: 'smooth'
        });
      }
    }
  }
};

var _excluded = ["scrollSpeed", "isSlideShow", "reverse", "children"];
// Use the optional prop interface to define the default props
var defaultProps = {
  scrollSpeed: 3,
  isSlideShow: false,
  reverse: false
};
var Scroller = function Scroller(props) {
  //let [id, setId] = React.useState<string>();
  var sc = React.useRef(null);
  var scrollSpeed = props.scrollSpeed,
    isSlideShow = props.isSlideShow,
    reverse = props.reverse,
    children = props.children,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  React.useEffect(function () {
    //let uniqueId = "_" + uuidv4();
    //setId(uniqueId);
    var scProps = {
      scrollSpeed: scrollSpeed,
      isSlideShow: isSlideShow,
      reverse: reverse
    };
    var element = sc.current;
    return registerEvent(element, scProps);
  }, [sc]);
  return React.createElement("div", Object.assign({
    ref: sc
  }, rest), children);
};
Scroller.defaultProps = defaultProps;

exports.default = Scroller;
//# sourceMappingURL=react-horizontal-auto-scroll.cjs.development.js.map
